{"file_contents":{"README.md":{"content":"# UniManagePro\n\nA comprehensive university resource management system built with modern web technologies.\n\n## 🎯 Features\n\n### 📚 Department Management\n- **Arts Department** - Art Studio and Music Room facilities\n- **Commerce Department** - Commerce Lab with business tools\n- **Engineering Departments**:\n  - B.Tech CSE - Computer Labs 3 & 4\n  - B.Tech Civil - Civil Engineering Lab\n  - B.Tech Mechanical - Mechanical Workshop\n  - B.Tech Electrical - Electrical Lab\n\n### 🏢 Facilities & Resources\n- **4 Computer Labs** (2 existing + 2 new for Engineering CSE)\n- **Specialized Engineering Labs** with equipment for each branch\n- **Sports Facilities**:\n  - Volleyball Court\n  - General Ground (multi-purpose outdoor sports)\n- **Academic Spaces**:\n  - Auditoriums and Seminar Halls\n  - Chemistry and Physics Labs\n\n### ⏰ Smart Scheduling\n- **Working Hours**: 9:00 AM - 3:00 PM for labs, classrooms, and indoor facilities\n- **24/7 Access**: Sports courts and grounds available round the clock\n- **Automatic Validation**: Booking system enforces working hours\n- **Real-time Availability**: Live status updates for all resources\n\n### 🔧 Technical Features\n- **Modern UI/UX**: Built with React, TailwindCSS, and Radix UI\n- **Type Safety**: Full TypeScript implementation\n- **Real-time Updates**: Live booking status and availability\n- **Responsive Design**: Works on desktop, tablet, and mobile\n- **Dark/Light Mode**: Theme switching support\n\n## 🚀 Tech Stack\n\n### Frontend\n- **React 18** - Modern React with hooks\n- **TypeScript** - Type-safe development\n- **TailwindCSS** - Utility-first CSS framework\n- **Radix UI** - Accessible component primitives\n- **Framer Motion** - Smooth animations\n- **Wouter** - Lightweight routing\n- **TanStack Query** - Data fetching and caching\n\n### Backend\n- **Node.js** - Runtime environment\n- **Express.js** - Web application framework\n- **TypeScript** - Type-safe server development\n- **Drizzle ORM** - Type-safe database operations\n- **Zod** - Schema validation\n\n### Development Tools\n- **Vite** - Fast build tool and dev server\n- **ESBuild** - Fast JavaScript bundler\n- **PostCSS** - CSS processing\n- **Autoprefixer** - CSS vendor prefixing\n\n## 📦 Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/khiasu/UniManagePro.git\n   cd UniManagePro\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Start the development server**\n   ```bash\n   npm run dev\n   ```\n\n4. **Open your browser**\n   Navigate to `http://localhost:5000`\n\n## 🛠️ Available Scripts\n\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run start` - Start production server\n- `npm run check` - Run TypeScript type checking\n- `npm run db:push` - Push database schema changes\n\n## 🏗️ Project Structure\n\n```\nUniManagePro/\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── pages/         # Page components\n│   │   ├── lib/           # Utilities and types\n│   │   └── hooks/         # Custom React hooks\n│   └── index.html         # HTML entry point\n├── server/                # Backend Express application\n│   ├── index.ts          # Server entry point\n│   ├── routes.ts         # API routes\n│   ├── storage.ts        # Data storage layer\n│   └── vite.ts           # Vite integration\n├── shared/               # Shared types and schemas\n│   └── schema.ts         # Database schema and types\n└── package.json          # Project dependencies\n```\n\n## 🎨 UI Components\n\nThe project uses a comprehensive set of UI components built on Radix UI:\n\n- **Forms**: Input, Select, Checkbox, Radio Group\n- **Navigation**: Sidebar, Breadcrumb, Pagination\n- **Feedback**: Toast, Alert, Progress\n- **Overlays**: Dialog, Popover, Tooltip\n- **Data Display**: Card, Table, Badge\n- **Layout**: Separator, Scroll Area, Resizable\n\n## 🔐 Authentication\n\nCurrently implements a simplified authentication system for demonstration purposes. In production, integrate with your preferred authentication provider.\n\n## 📊 Database Schema\n\nThe system uses the following main entities:\n\n- **Users** - Student and faculty information\n- **Departments** - Academic and administrative departments\n- **Resources** - Bookable facilities and equipment\n- **Bookings** - Resource reservation records\n\n## 🌟 Key Features in Detail\n\n### Resource Booking System\n- **Real-time Availability**: Check resource status instantly\n- **Conflict Detection**: Prevents double-booking automatically\n- **Working Hours Validation**: Ensures bookings within operational hours\n- **Approval Workflow**: Some resources require faculty approval\n\n### Dashboard Analytics\n- **Resource Statistics**: Available, booked, and ongoing resources\n- **Personal Bookings**: Track your reservation history\n- **Quick Actions**: Fast access to common tasks\n- **Visual Indicators**: Color-coded status system\n\n### Responsive Design\n- **Mobile-First**: Optimized for all screen sizes\n- **Touch-Friendly**: Easy navigation on mobile devices\n- **Progressive Enhancement**: Works without JavaScript\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## 📝 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- Built with modern web technologies\n- UI components from Radix UI\n- Icons from Lucide React\n- Fonts from Google Fonts\n\n## 📞 Support\n\nFor support, email your-email@example.com or create an issue in this repository.\n\n---\n\n**UniManagePro** - Making university resource management simple and efficient! 🎓\n","size_bytes":5959},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Resource Booking Management System\n\n## Overview\n\nThis is a university resource booking management system built as a full-stack web application. The system allows students and faculty to browse, book, and manage university resources like computer labs, chemistry labs, auditoriums, and other facilities. It features a modern React frontend with a Node.js/Express backend and PostgreSQL database using Drizzle ORM.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript for type safety and better development experience\n- **Vite** as the build tool for fast development and optimized production builds\n- **Wouter** for lightweight client-side routing instead of React Router\n- **TanStack Query** for server state management, caching, and API interactions\n- **shadcn/ui** component library with Radix UI primitives for consistent, accessible UI components\n- **Tailwind CSS** for utility-first styling with CSS variables for theming\n- **Framer Motion** for smooth animations and transitions\n- **React Hook Form** with Zod validation for form handling and validation\n\nThe frontend follows a component-based architecture with:\n- Reusable UI components in `client/src/components/ui/`\n- Feature-specific components for booking slots, resource cards, and forms\n- Custom hooks for mobile detection and toast notifications\n- Centralized theme management with dark/light mode support\n\n### Backend Architecture\n- **Express.js** server with TypeScript for the REST API\n- **In-memory storage** as the data layer (likely for development/demo purposes)\n- Modular route organization with separate route handlers\n- Custom middleware for request logging and error handling\n- Development-optimized Vite integration for hot module replacement\n\nThe backend implements:\n- RESTful API endpoints for resources, bookings, departments, and authentication\n- Storage abstraction layer with interfaces for data operations\n- Dashboard analytics and booking management functionality\n\n### Database Design\n- **PostgreSQL** with Drizzle ORM for type-safe database operations\n- **Neon Database** serverless PostgreSQL for cloud deployment\n- Schema-driven approach with TypeScript types generated from database schema\n\nKey entities:\n- **Users**: Students and faculty with role-based access\n- **Departments**: Academic departments with associated resources\n- **Resources**: Bookable facilities with capacity, equipment, and availability\n- **Bookings**: Reservation records with status tracking and approval workflows\n\n### State Management\n- **TanStack Query** handles server state with automatic caching and background updates\n- **React Context** for theme management\n- Local component state for UI interactions and form handling\n\n### Authentication & Authorization\n- Simplified authentication system (likely for demo purposes)\n- User session management with role-based access (student/faculty)\n- Department-based resource access control\n\n### UI/UX Design System\n- **Design tokens** implemented via CSS custom properties\n- **Component variants** using class-variance-authority for consistent styling\n- **Responsive design** with mobile-first approach\n- **Accessibility** built-in through Radix UI primitives\n- **Animation system** using Framer Motion for enhanced user experience\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL client for database connectivity\n- **drizzle-orm & drizzle-kit**: Type-safe ORM with schema migrations\n- **express**: Web server framework for REST API\n- **tsx**: TypeScript execution for development server\n\n### Frontend Libraries\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight routing for single-page application\n- **@hookform/resolvers**: Form validation integration\n- **framer-motion**: Animation and gesture library\n- **date-fns**: Date manipulation and formatting\n\n### UI Component System\n- **@radix-ui/***: Headless UI primitives for accessibility\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **lucide-react**: Icon library\n\n### Development Tools\n- **vite**: Build tool and development server\n- **typescript**: Static type checking\n- **@replit/vite-plugin-***: Replit-specific development enhancements\n\n### Database & Validation\n- **zod**: Schema validation for forms and API\n- **drizzle-zod**: Integration between Drizzle ORM and Zod validation\n- **connect-pg-simple**: PostgreSQL session store (though sessions appear simplified)\n\nThe system is designed as a modern, type-safe full-stack application with a focus on developer experience and user interface polish, suitable for a university resource management use case.","size_bytes":4799},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      animation: {\n        \"slide-in\": \"slideIn 0.3s ease-out\",\n        \"fade-in\": \"fadeIn 0.3s ease-out\",\n        \"scale-in\": \"scaleIn 0.2s ease-out\",\n        \"pulse-subtle\": \"pulse 2s infinite\",\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      keyframes: {\n        slideIn: {\n          from: { transform: \"translateX(-100%)\", opacity: \"0\" },\n          to: { transform: \"translateX(0)\", opacity: \"1\" },\n        },\n        fadeIn: {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        scaleIn: {\n          from: { transform: \"scale(0.95)\", opacity: \"0\" },\n          to: { transform: \"scale(1)\", opacity: \"1\" },\n        },\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      scale: {\n        '102': '1.02',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3531},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2045},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertBookingSchema, insertResourceSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth endpoints (simplified for demo)\n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      // For demo purposes, return the sample user\n      const user = await storage.getUserByUsername(\"sarah.chen\");\n      if (user) {\n        const { password, ...userWithoutPassword } = user;\n        res.json(userWithoutPassword);\n      } else {\n        res.status(401).json({ message: \"Not authenticated\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to authenticate\" });\n    }\n  });\n\n  // Department endpoints\n  app.get(\"/api/departments\", async (req, res) => {\n    try {\n      const departments = await storage.getAllDepartments();\n      res.json(departments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch departments\" });\n    }\n  });\n\n  // Resource endpoints\n  app.get(\"/api/resources\", async (req, res) => {\n    try {\n      const { department, type } = req.query;\n      \n      let resources;\n      if (department) {\n        resources = await storage.getResourcesByDepartment(department as string);\n      } else if (type) {\n        resources = await storage.getResourcesByType(type as string);\n      } else {\n        resources = await storage.getAllResources();\n      }\n\n      // Enrich with department info and status\n      const departments = await storage.getAllDepartments();\n      const enrichedResources = await Promise.all(\n        resources.map(async (resource) => {\n          const dept = departments.find(d => d.id === resource.departmentId);\n          const status = await storage.getResourceStatus(resource.id);\n          return {\n            ...resource,\n            department: dept,\n            status,\n            workingHoursStart: resource.workingHoursStart,\n            workingHoursEnd: resource.workingHoursEnd,\n            hasWorkingHours: resource.hasWorkingHours,\n          };\n        })\n      );\n\n      res.json(enrichedResources);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch resources\" });\n    }\n  });\n\n  app.get(\"/api/resources/:id\", async (req, res) => {\n    try {\n      const resource = await storage.getResource(req.params.id);\n      if (!resource) {\n        return res.status(404).json({ message: \"Resource not found\" });\n      }\n\n      const department = await storage.getDepartment(resource.departmentId);\n      const status = await storage.getResourceStatus(resource.id);\n      \n      res.json({\n        ...resource,\n        department,\n        status,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch resource\" });\n    }\n  });\n\n  // Booking endpoints\n  app.get(\"/api/bookings\", async (req, res) => {\n    try {\n      const { user, resource, date } = req.query;\n      \n      let bookings;\n      if (user) {\n        bookings = await storage.getBookingsByUser(user as string);\n      } else if (resource) {\n        bookings = await storage.getBookingsByResource(resource as string);\n      } else if (date) {\n        const startDate = new Date(date as string);\n        const endDate = new Date(startDate);\n        endDate.setDate(endDate.getDate() + 1);\n        bookings = await storage.getBookingsByDateRange(startDate, endDate);\n      } else {\n        bookings = await storage.getAllBookings();\n      }\n\n      // Enrich with resource and user info\n      const resources = await storage.getAllResources();\n      const enrichedBookings = bookings.map(booking => {\n        const resource = resources.find(r => r.id === booking.resourceId);\n        return {\n          ...booking,\n          resource,\n        };\n      });\n\n      res.json(enrichedBookings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      const validatedData = insertBookingSchema.parse(req.body);\n      \n      // Check working hours validation\n      const timeValidation = await storage.isBookingTimeValid(\n        validatedData.resourceId,\n        validatedData.startTime,\n        validatedData.endTime\n      );\n\n      if (!timeValidation.valid) {\n        return res.status(400).json({ \n          message: timeValidation.message \n        });\n      }\n      \n      // Check for conflicts\n      const conflicts = await storage.getConflictingBookings(\n        validatedData.resourceId,\n        validatedData.startTime,\n        validatedData.endTime\n      );\n\n      if (conflicts.length > 0) {\n        return res.status(409).json({ \n          message: \"Time slot conflicts with existing booking\",\n          conflicts \n        });\n      }\n\n      const booking = await storage.createBooking(validatedData);\n      res.status(201).json(booking);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid booking data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create booking\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/bookings/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      const booking = await storage.updateBookingStatus(req.params.id, status);\n      \n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n\n      res.json(booking);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update booking status\" });\n    }\n  });\n\n  app.delete(\"/api/bookings/:id\", async (req, res) => {\n    try {\n      const success = await storage.cancelBooking(req.params.id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n\n      res.json({ message: \"Booking cancelled successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to cancel booking\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      // For demo, use sample user\n      const user = await storage.getUserByUsername(\"sarah.chen\");\n      if (!user) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const stats = await storage.getDashboardStats(user.id);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Resource availability check\n  app.get(\"/api/resources/:id/availability\", async (req, res) => {\n    try {\n      const { date } = req.query;\n      const resourceId = req.params.id;\n      \n      if (!date) {\n        return res.status(400).json({ message: \"Date parameter is required\" });\n      }\n\n      const startDate = new Date(date as string);\n      const endDate = new Date(startDate);\n      endDate.setDate(endDate.getDate() + 1);\n      \n      const bookings = await storage.getBookingsByResource(resourceId);\n      const dayBookings = bookings.filter(b => \n        b.startTime >= startDate && \n        b.startTime < endDate &&\n        b.status !== 'cancelled'\n      );\n\n      res.json(dayBookings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to check availability\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7454},"server/storage.ts":{"content":"import { \n  users,\n  departments,\n  resources,\n  bookings,\n  type User, \n  type InsertUser,\n  type Department,\n  type InsertDepartment,\n  type Resource,\n  type InsertResource,\n  type Booking,\n  type InsertBooking,\n  type BookingStatus,\n  type ResourceStatus\n} from \"@shared/schema\";\nimport { eq, and, gte, lte, or, sql } from \"drizzle-orm\";\nimport { db } from \"./db\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Departments\n  getAllDepartments(): Promise<Department[]>;\n  getDepartment(id: string): Promise<Department | undefined>;\n  createDepartment(department: InsertDepartment): Promise<Department>;\n\n  // Resources\n  getAllResources(): Promise<Resource[]>;\n  getResource(id: string): Promise<Resource | undefined>;\n  getResourcesByDepartment(departmentId: string): Promise<Resource[]>;\n  getResourcesByType(type: string): Promise<Resource[]>;\n  createResource(resource: InsertResource): Promise<Resource>;\n  updateResource(id: string, updates: Partial<Resource>): Promise<Resource | undefined>;\n\n  // Bookings\n  getAllBookings(): Promise<Booking[]>;\n  getBooking(id: string): Promise<Booking | undefined>;\n  getBookingsByUser(userId: string): Promise<Booking[]>;\n  getBookingsByResource(resourceId: string): Promise<Booking[]>;\n  getBookingsByDateRange(startDate: Date, endDate: Date): Promise<Booking[]>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBookingStatus(id: string, status: BookingStatus): Promise<Booking | undefined>;\n  cancelBooking(id: string): Promise<boolean>;\n\n  // Utility methods\n  getResourceStatus(resourceId: string): Promise<ResourceStatus>;\n  getConflictingBookings(resourceId: string, startTime: Date, endTime: Date): Promise<Booking[]>;\n  getDashboardStats(userId: string): Promise<{\n    available: number;\n    booked: number;\n    ongoing: number;\n    myBookings: number;\n  }>;\n  isBookingTimeValid(resourceId: string, startTime: Date, endTime: Date): Promise<{ valid: boolean; message?: string }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    this.initializeData().catch(console.error);\n  }\n\n  private async initializeData() {\n    try {\n      // Check if data already exists\n      const existingDepts = await db.select().from(departments).limit(1);\n      if (existingDepts.length > 0) return; // Data already initialized\n\n      // Initialize departments\n      const depts = [\n        { name: \"Computer Science\", code: \"CS\", description: \"Computer Science Department\", icon: \"fas fa-desktop\", color: \"blue\" },\n        { name: \"Chemistry\", code: \"CHEM\", description: \"Chemistry Department\", icon: \"fas fa-flask\", color: \"green\" },\n        { name: \"Physics\", code: \"PHYS\", description: \"Physics Department\", icon: \"fas fa-atom\", color: \"purple\" },\n        { name: \"Biology\", code: \"BIO\", description: \"Biology Department\", icon: \"fas fa-dna\", color: \"red\" },\n        { name: \"Mathematics\", code: \"MATH\", description: \"Mathematics Department\", icon: \"fas fa-calculator\", color: \"orange\" },\n        { name: \"General Facilities\", code: \"GEN\", description: \"General University Facilities\", icon: \"fas fa-building\", color: \"gray\" },\n      ];\n\n      const insertedDepts = await db.insert(departments).values(depts).returning();\n\n      // Get department IDs for resource creation\n      const csDeptId = insertedDepts.find(d => d.code === \"CS\")?.id!;\n      const chemDeptId = insertedDepts.find(d => d.code === \"CHEM\")?.id!;\n      const physDeptId = insertedDepts.find(d => d.code === \"PHYS\")?.id!;\n      const genDeptId = insertedDepts.find(d => d.code === \"GEN\")?.id!;\n\n      // Initialize resources\n      const resourcesData = [\n        {\n          name: \"Computer Lab 1\",\n          type: \"computer_lab\",\n          departmentId: csDeptId,\n          capacity: 30,\n          equipment: [\"Computers\", \"Projector\", \"Whiteboard\"],\n          description: \"Main computer lab with latest hardware\",\n          location: \"CS Building, Floor 2\",\n          requiresApproval: false,\n          workingHoursStart: \"09:00\",\n          workingHoursEnd: \"15:00\",\n          hasWorkingHours: true,\n        },\n        {\n          name: \"Computer Lab 2\",\n          type: \"computer_lab\",\n          departmentId: csDeptId,\n          capacity: 25,\n          equipment: [\"Computers\", \"Smart Board\"],\n          description: \"Secondary computer lab for programming courses\",\n          location: \"CS Building, Floor 3\",\n          requiresApproval: false,\n          workingHoursStart: \"09:00\",\n          workingHoursEnd: \"15:00\",\n          hasWorkingHours: true,\n        },\n        {\n          name: \"Organic Chemistry Lab\",\n          type: \"chemistry_lab\",\n          departmentId: chemDeptId,\n          capacity: 24,\n          equipment: [\"Lab Equipment\", \"Fume Hood\", \"Safety Equipment\"],\n          description: \"Advanced chemistry laboratory\",\n          location: \"Chemistry Building, Floor 1\",\n          requiresApproval: true,\n          workingHoursStart: \"09:00\",\n          workingHoursEnd: \"15:00\",\n          hasWorkingHours: true,\n        },\n        {\n          name: \"Physics Lab A\",\n          type: \"physics_lab\",\n          departmentId: physDeptId,\n          capacity: 20,\n          equipment: [\"Oscilloscopes\", \"Function Generators\", \"Lab Benches\"],\n          description: \"Electronics and circuits laboratory\",\n          location: \"Physics Building, Floor 2\",\n          requiresApproval: false,\n          workingHoursStart: \"09:00\",\n          workingHoursEnd: \"15:00\",\n          hasWorkingHours: true,\n        },\n        {\n          name: \"Main Auditorium\",\n          type: \"auditorium\",\n          departmentId: genDeptId,\n          capacity: 500,\n          equipment: [\"Sound System\", \"Stage\", \"Projector\", \"Lighting\"],\n          description: \"Main university auditorium for large events\",\n          location: \"Main Building, Ground Floor\",\n          requiresApproval: true,\n          workingHoursStart: \"09:00\",\n          workingHoursEnd: \"15:00\",\n          hasWorkingHours: true,\n        },\n        {\n          name: \"Seminar Hall A\",\n          type: \"seminar_hall\",\n          departmentId: genDeptId,\n          capacity: 50,\n          equipment: [\"Projector\", \"Sound System\", \"Conference Table\"],\n          description: \"Medium-sized seminar hall\",\n          location: \"Academic Block, Floor 1\",\n          requiresApproval: false,\n          workingHoursStart: \"09:00\",\n          workingHoursEnd: \"15:00\",\n          hasWorkingHours: true,\n        },\n        {\n          name: \"Basketball Court\",\n          type: \"sports_court\",\n          departmentId: genDeptId,\n          capacity: 100,\n          equipment: [\"Basketball Hoops\", \"Scoreboard\", \"Benches\"],\n          description: \"Indoor basketball court\",\n          location: \"Sports Complex\",\n          requiresApproval: false,\n          workingHoursStart: \"00:00\",\n          workingHoursEnd: \"23:59\",\n          hasWorkingHours: false,\n        },\n      ];\n\n      await db.insert(resources).values(resourcesData);\n\n      // Initialize sample user\n      await db.insert(users).values({\n        username: \"sarah.chen\",\n        email: \"sarah.chen@university.edu\",\n        password: \"hashedpassword\",\n        firstName: \"Sarah\",\n        lastName: \"Chen\",\n        role: \"faculty\",\n        department: \"Computer Science\",\n        profileImage: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      });\n    } catch (error) {\n      console.error(\"Error initializing data:\", error);\n    }\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  // Department methods\n  async getAllDepartments(): Promise<Department[]> {\n    return await db.select().from(departments);\n  }\n\n  async getDepartment(id: string): Promise<Department | undefined> {\n    const [dept] = await db.select().from(departments).where(eq(departments.id, id));\n    return dept || undefined;\n  }\n\n  async createDepartment(insertDepartment: InsertDepartment): Promise<Department> {\n    const [dept] = await db.insert(departments).values(insertDepartment).returning();\n    return dept;\n  }\n\n  // Resource methods\n  async getAllResources(): Promise<Resource[]> {\n    return await db.select().from(resources).where(eq(resources.isActive, true));\n  }\n\n  async getResource(id: string): Promise<Resource | undefined> {\n    const [resource] = await db.select().from(resources).where(eq(resources.id, id));\n    return resource || undefined;\n  }\n\n  async getResourcesByDepartment(departmentId: string): Promise<Resource[]> {\n    return await db.select().from(resources)\n      .where(and(eq(resources.departmentId, departmentId), eq(resources.isActive, true)));\n  }\n\n  async getResourcesByType(type: string): Promise<Resource[]> {\n    return await db.select().from(resources)\n      .where(and(eq(resources.type, type), eq(resources.isActive, true)));\n  }\n\n  async createResource(insertResource: InsertResource): Promise<Resource> {\n    const [resource] = await db.insert(resources).values({\n      ...insertResource,\n      isActive: true,\n      workingHoursStart: insertResource.workingHoursStart || \"09:00\",\n      workingHoursEnd: insertResource.workingHoursEnd || \"15:00\",\n      hasWorkingHours: insertResource.hasWorkingHours ?? true,\n    }).returning();\n    return resource;\n  }\n\n  async updateResource(id: string, updates: Partial<Resource>): Promise<Resource | undefined> {\n    const [resource] = await db.update(resources)\n      .set(updates)\n      .where(eq(resources.id, id))\n      .returning();\n    return resource || undefined;\n  }\n\n  // Booking methods\n  async getAllBookings(): Promise<Booking[]> {\n    return await db.select().from(bookings);\n  }\n\n  async getBooking(id: string): Promise<Booking | undefined> {\n    const [booking] = await db.select().from(bookings).where(eq(bookings.id, id));\n    return booking || undefined;\n  }\n\n  async getBookingsByUser(userId: string): Promise<Booking[]> {\n    return await db.select().from(bookings).where(eq(bookings.userId, userId));\n  }\n\n  async getBookingsByResource(resourceId: string): Promise<Booking[]> {\n    return await db.select().from(bookings).where(eq(bookings.resourceId, resourceId));\n  }\n\n  async getBookingsByDateRange(startDate: Date, endDate: Date): Promise<Booking[]> {\n    return await db.select().from(bookings)\n      .where(and(gte(bookings.startTime, startDate), lte(bookings.endTime, endDate)));\n  }\n\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const [booking] = await db.insert(bookings).values({\n      ...insertBooking,\n      status: 'pending',\n    }).returning();\n    return booking;\n  }\n\n  async updateBookingStatus(id: string, status: BookingStatus): Promise<Booking | undefined> {\n    const [booking] = await db.update(bookings)\n      .set({ status })\n      .where(eq(bookings.id, id))\n      .returning();\n    return booking || undefined;\n  }\n\n  async cancelBooking(id: string): Promise<boolean> {\n    const [booking] = await db.update(bookings)\n      .set({ status: 'cancelled' })\n      .where(eq(bookings.id, id))\n      .returning();\n    return !!booking;\n  }\n\n  // Utility methods\n  async getResourceStatus(resourceId: string): Promise<ResourceStatus> {\n    const now = new Date();\n    const currentBookings = await db.select().from(bookings).where(\n      and(\n        eq(bookings.resourceId, resourceId),\n        eq(bookings.status, 'confirmed'),\n        lte(bookings.startTime, now),\n        gte(bookings.endTime, now)\n      )\n    );\n\n    if (currentBookings.length > 0) {\n      return 'ongoing';\n    }\n\n    const futureBookings = await db.select().from(bookings).where(\n      and(\n        eq(bookings.resourceId, resourceId),\n        eq(bookings.status, 'confirmed'),\n        gte(bookings.startTime, now)\n      )\n    );\n\n    return futureBookings.length > 0 ? 'booked' : 'available';\n  }\n\n  async getConflictingBookings(resourceId: string, startTime: Date, endTime: Date): Promise<Booking[]> {\n    return await db.select().from(bookings).where(\n      and(\n        eq(bookings.resourceId, resourceId),\n        sql`${bookings.status} != 'cancelled'`,\n        or(\n          and(lte(bookings.startTime, startTime), gte(bookings.endTime, startTime)),\n          and(lte(bookings.startTime, endTime), gte(bookings.endTime, endTime)),\n          and(gte(bookings.startTime, startTime), lte(bookings.endTime, endTime))\n        )\n      )\n    );\n  }\n\n  async getDashboardStats(userId: string): Promise<{\n    available: number;\n    booked: number;\n    ongoing: number;\n    myBookings: number;\n  }> {\n    const allResources = await this.getAllResources();\n    const now = new Date();\n    \n    let available = 0;\n    let booked = 0;\n    let ongoing = 0;\n\n    for (const resource of allResources) {\n      const status = await this.getResourceStatus(resource.id);\n      switch (status) {\n        case 'available':\n          available++;\n          break;\n        case 'booked':\n          booked++;\n          break;\n        case 'ongoing':\n          ongoing++;\n          break;\n      }\n    }\n\n    const userBookings = await db.select().from(bookings).where(\n      and(\n        eq(bookings.userId, userId),\n        sql`${bookings.status} != 'cancelled'`,\n        gte(bookings.endTime, now)\n      )\n    );\n\n    return { available, booked, ongoing, myBookings: userBookings.length };\n  }\n\n  async isBookingTimeValid(resourceId: string, startTime: Date, endTime: Date): Promise<{ valid: boolean; message?: string }> {\n    const resource = await this.getResource(resourceId);\n    if (!resource) {\n      return { valid: false, message: 'Resource not found' };\n    }\n\n    if (resource.hasWorkingHours) {\n      const workingHoursStart = new Date('1970-01-01T' + resource.workingHoursStart + 'Z');\n      const workingHoursEnd = new Date('1970-01-01T' + resource.workingHoursEnd + 'Z');\n      if (startTime < workingHoursStart || endTime > workingHoursEnd) {\n        return { valid: false, message: 'Booking time is outside of working hours' };\n      }\n    }\n\n    const conflictingBookings = await this.getConflictingBookings(resourceId, startTime, endTime);\n    if (conflictingBookings.length > 0) {\n      return { valid: false, message: 'Booking time conflicts with existing bookings' };\n    }\n\n    return { valid: true };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":15086},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: text(\"role\").notNull(), // 'student' or 'faculty'\n  department: text(\"department\").notNull(),\n  profileImage: text(\"profile_image\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const departments = pgTable(\"departments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  code: text(\"code\").notNull().unique(),\n  description: text(\"description\"),\n  icon: text(\"icon\").notNull(),\n  color: text(\"color\").notNull(),\n});\n\nexport const resources = pgTable(\"resources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // 'computer_lab', 'chemistry_lab', 'auditorium', 'engineering_lab', 'art_studio', 'music_room', 'commerce_lab', 'sports_court', 'sports_ground', etc.\n  departmentId: varchar(\"department_id\").references(() => departments.id).notNull(),\n  capacity: integer(\"capacity\").notNull(),\n  equipment: text(\"equipment\").array(), // JSON array of equipment\n  description: text(\"description\"),\n  location: text(\"location\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  requiresApproval: boolean(\"requires_approval\").default(false),\n  workingHoursStart: text(\"working_hours_start\").default(\"09:00\"), // Start time (24-hour format)\n  workingHoursEnd: text(\"working_hours_end\").default(\"15:00\"), // End time (24-hour format)\n  hasWorkingHours: boolean(\"has_working_hours\").default(true), // False for courts/grounds that are always available\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  resourceId: varchar(\"resource_id\").references(() => resources.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  startTime: timestamp(\"start_time\").notNull(),\n  endTime: timestamp(\"end_time\").notNull(),\n  status: text(\"status\").notNull(), // 'pending', 'confirmed', 'ongoing', 'completed', 'cancelled'\n  purpose: text(\"purpose\").notNull(),\n  attendees: integer(\"attendees\").notNull(),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n  firstName: true,\n  lastName: true,\n  role: true,\n  department: true,\n  profileImage: true,\n});\n\nexport const insertDepartmentSchema = createInsertSchema(departments).pick({\n  name: true,\n  code: true,\n  description: true,\n  icon: true,\n  color: true,\n});\n\nexport const insertResourceSchema = createInsertSchema(resources).pick({\n  name: true,\n  type: true,\n  departmentId: true,\n  capacity: true,\n  equipment: true,\n  description: true,\n  location: true,\n  requiresApproval: true,\n  workingHoursStart: true,\n  workingHoursEnd: true,\n  hasWorkingHours: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).pick({\n  resourceId: true,\n  userId: true,\n  purpose: true,\n  attendees: true,\n}).extend({\n  startTime: z.string().transform((str) => new Date(str)),\n  endTime: z.string().transform((str) => new Date(str)),\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Department = typeof departments.$inferSelect;\nexport type InsertDepartment = z.infer<typeof insertDepartmentSchema>;\nexport type Resource = typeof resources.$inferSelect;\nexport type InsertResource = z.infer<typeof insertResourceSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\n\n// Status types\nexport type BookingStatus = 'pending' | 'confirmed' | 'ongoing' | 'completed' | 'cancelled';\nexport type ResourceStatus = 'available' | 'booked' | 'ongoing' | 'maintenance';\nexport type UserRole = 'student' | 'faculty';\n","size_bytes":4490},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { useState } from \"react\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { ThemeProvider, useTheme } from \"./components/theme-provider\";\nimport { Sidebar } from \"./components/sidebar\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport Dashboard from \"@/pages/dashboard\";\nimport MyBookings from \"@/pages/my-bookings\";\nimport BrowseResources from \"@/pages/browse-resources\";\nimport NotFound from \"@/pages/not-found\";\nimport { Menu, Search, Bell, Sun, Moon } from \"lucide-react\";\n\nfunction TopBar({ onMenuClick }: { onMenuClick: () => void }) {\n  const { theme, toggleTheme } = useTheme();\n  \n  return (\n    <header className=\"bg-card border-b border-border sticky top-0 z-30\">\n      <div className=\"flex items-center justify-between px-4 lg:px-8 py-4\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onMenuClick}\n            className=\"lg:hidden\"\n            data-testid=\"button-menu\"\n          >\n            <Menu className=\"w-5 h-5\" />\n          </Button>\n          <div>\n            <h2 className=\"text-xl font-semibold\">Resource Dashboard</h2>\n            <p className=\"text-sm text-muted-foreground\">Manage and book university resources</p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-4\">\n          {/* Search */}\n          <div className=\"hidden md:flex relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search resources...\"\n              className=\"w-64 pl-10\"\n              data-testid=\"input-global-search\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n          </div>\n\n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-notifications\">\n            <Bell className=\"w-5 h-5\" />\n            <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full\"></span>\n          </Button>\n\n          {/* Theme Toggle */}\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={toggleTheme}\n            data-testid=\"button-theme-toggle\"\n          >\n            <motion.div\n              initial={false}\n              animate={{ rotate: theme === \"dark\" ? 180 : 0 }}\n              transition={{ duration: 0.3 }}\n            >\n              {theme === \"light\" ? <Moon className=\"w-5 h-5\" /> : <Sun className=\"w-5 h-5\" />}\n            </motion.div>\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nfunction MainContent() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Sidebar\n        isOpen={sidebarOpen}\n        onToggle={() => setSidebarOpen(!sidebarOpen)}\n        onClose={() => setSidebarOpen(false)}\n      />\n      \n      <main className=\"lg:ml-72 min-h-screen\">\n        <TopBar onMenuClick={() => setSidebarOpen(true)} />\n        \n        <div className=\"p-4 lg:p-8\">\n          <AnimatePresence mode=\"wait\">\n            <Switch>\n              <Route path=\"/\" component={Dashboard} />\n              <Route path=\"/my-bookings\" component={MyBookings} />\n              <Route path=\"/browse-resources\" component={BrowseResources} />\n              <Route component={NotFound} />\n            </Switch>\n          </AnimatePresence>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"uni-resource-theme\">\n        <TooltipProvider>\n          <MainContent />\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4113},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --radius: 8px;\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(240 10% 3.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(240 10% 3.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(240 10% 3.9%);\n  --primary: hsl(221 83% 53%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222 84% 4.9%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16.3% 46.9%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222 84% 4.9%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --success: hsl(142 71% 45%);\n  --success-foreground: hsl(210 40% 98%);\n  --warning: hsl(38 92% 50%);\n  --warning-foreground: hsl(222 84% 4.9%);\n  --border: hsl(214.3 31.8% 91.4%);\n  --input: hsl(214.3 31.8% 91.4%);\n  --ring: hsl(221 83% 53%);\n  --sidebar-background: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(240 10% 3.9%);\n  --sidebar-primary: hsl(221 83% 53%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222 84% 4.9%);\n  --sidebar-border: hsl(214.3 31.8% 91.4%);\n  --sidebar-ring: hsl(221 83% 53%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(224 71% 4%);\n  --foreground: hsl(213 31% 91%);\n  --card: hsl(224 71% 4%);\n  --card-foreground: hsl(213 31% 91%);\n  --popover: hsl(224 71% 4%);\n  --popover-foreground: hsl(213 31% 91%);\n  --primary: hsl(221 83% 53%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(215 25% 27%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(215 25% 27%);\n  --muted-foreground: hsl(217 10.6% 64.9%);\n  --accent: hsl(215 25% 27%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 63% 31%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --success: hsl(142 71% 45%);\n  --success-foreground: hsl(210 40% 98%);\n  --warning: hsl(38 92% 50%);\n  --warning-foreground: hsl(222 84% 4.9%);\n  --border: hsl(215 27.9% 16.9%);\n  --input: hsl(215 27.9% 16.9%);\n  --ring: hsl(221 83% 53%);\n  --sidebar-background: hsl(224 71% 4%);\n  --sidebar-foreground: hsl(213 31% 91%);\n  --sidebar-primary: hsl(221 83% 53%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(215 25% 27%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(215 27.9% 16.9%);\n  --sidebar-ring: hsl(221 83% 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@layer components {\n  .status-available {\n    @apply bg-success text-success-foreground;\n  }\n  \n  .status-booked {\n    @apply bg-warning text-warning-foreground;\n  }\n  \n  .status-ongoing {\n    @apply bg-destructive text-destructive-foreground;\n  }\n  \n  .status-acquired {\n    @apply bg-secondary text-secondary-foreground;\n  }\n  \n  .resource-card {\n    @apply transition-all duration-300 ease-out;\n  }\n  \n  .resource-card:hover {\n    @apply transform -translate-y-1 shadow-lg;\n  }\n  \n  .dark .resource-card:hover {\n    @apply shadow-black/30;\n  }\n  \n  .booking-slot {\n    @apply transition-all duration-200 ease-out;\n  }\n  \n  .booking-slot:hover {\n    @apply transform scale-102;\n  }\n  \n  .sidebar-transition {\n    @apply transition-transform duration-300 ease-in-out;\n  }\n  \n  .mobile-menu-overlay {\n    @apply backdrop-blur-sm;\n  }\n}\n\n@layer utilities {\n  .animate-slide-in {\n    animation: slideIn 0.3s ease-out;\n  }\n  \n  .animate-fade-in {\n    animation: fadeIn 0.3s ease-out;\n  }\n  \n  .animate-scale-in {\n    animation: scaleIn 0.2s ease-out;\n  }\n  \n  .animate-pulse-subtle {\n    animation: pulse 2s infinite;\n  }\n}\n\n@keyframes slideIn {\n  from { \n    transform: translateX(-100%); \n    opacity: 0; \n  }\n  to { \n    transform: translateX(0); \n    opacity: 1; \n  }\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n  }\n  to { \n    opacity: 1; \n  }\n}\n\n@keyframes scaleIn {\n  from { \n    transform: scale(0.95); \n    opacity: 0; \n  }\n  to { \n    transform: scale(1); \n    opacity: 1; \n  }\n}\n","size_bytes":4248},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/booking-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { ResourceWithStatus } from \"@/lib/types\";\nimport { Calendar, Clock, Users, MapPin, X } from \"lucide-react\";\n\ninterface BookingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  resource: ResourceWithStatus | null;\n}\n\nconst bookingSchema = z.object({\n  startTime: z.string().min(1, \"Start time is required\"),\n  endTime: z.string().min(1, \"End time is required\"),\n  purpose: z.string().min(1, \"Purpose is required\").max(200, \"Purpose must be less than 200 characters\"),\n  attendees: z.number().min(1, \"At least 1 attendee required\").max(500, \"Too many attendees\"),\n});\n\ntype BookingFormData = z.infer<typeof bookingSchema>;\n\nexport function BookingModal({ isOpen, onClose, resource }: BookingModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: currentUser } = useQuery<any>({\n    queryKey: [\"/api/auth/me\"],\n  });\n  \n  const form = useForm<BookingFormData>({\n    resolver: zodResolver(bookingSchema),\n    defaultValues: {\n      startTime: \"\",\n      endTime: \"\",\n      purpose: \"\",\n      attendees: 1,\n    },\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (data: BookingFormData) => {\n      if (!resource) throw new Error(\"No resource selected\");\n      \n      if (!currentUser) {\n        throw new Error(\"User not authenticated\");\n      }\n      \n      return apiRequest(\"POST\", \"/api/bookings\", {\n        resourceId: resource.id,\n        userId: currentUser.id,\n        startTime: new Date(data.startTime).toISOString(),\n        endTime: new Date(data.endTime).toISOString(),\n        purpose: data.purpose,\n        attendees: data.attendees,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Booking Created Successfully\",\n        description: `Your booking for ${resource?.name} has been confirmed.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      onClose();\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to create booking. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: BookingFormData) => {\n    bookingMutation.mutate(data);\n  };\n\n  if (!resource) return null;\n\n  // Get today's date and time for min datetime\n  const now = new Date();\n  const today = now.toISOString().slice(0, 16);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"booking-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <span>Book {resource.name}</span>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-booking-modal\">\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Resource Info */}\n          <motion.div\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"bg-muted/50 rounded-lg p-4\"\n          >\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n              <div>\n                <p className=\"text-muted-foreground flex items-center gap-1\">\n                  <Users className=\"w-3 h-3\" />\n                  Capacity\n                </p>\n                <p className=\"font-medium\">{resource.capacity} people</p>\n              </div>\n              <div>\n                <p className=\"text-muted-foreground\">Department</p>\n                <p className=\"font-medium\">{resource.department?.name}</p>\n              </div>\n              <div>\n                <p className=\"text-muted-foreground flex items-center gap-1\">\n                  <MapPin className=\"w-3 h-3\" />\n                  Location\n                </p>\n                <p className=\"font-medium text-xs\">{resource.location}</p>\n              </div>\n              <div>\n                <p className=\"text-muted-foreground\">Status</p>\n                <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${\n                  resource.status === 'available' ? 'bg-success text-success-foreground' :\n                  resource.status === 'booked' ? 'bg-warning text-warning-foreground' :\n                  resource.status === 'ongoing' ? 'bg-destructive text-destructive-foreground' :\n                  'bg-secondary text-secondary-foreground'\n                }`}>\n                  {resource.status}\n                </span>\n              </div>\n            </div>\n            \n            {/* Working Hours Info */}\n            {resource.hasWorkingHours && (\n              <div className=\"mt-3 pt-3 border-t border-border/50\">\n                <p className=\"text-muted-foreground flex items-center gap-1 text-sm\">\n                  <Clock className=\"w-3 h-3\" />\n                  Working Hours: {resource.workingHoursStart} - {resource.workingHoursEnd}\n                </p>\n              </div>\n            )}\n            {!resource.hasWorkingHours && (\n              <div className=\"mt-3 pt-3 border-t border-border/50\">\n                <p className=\"text-muted-foreground flex items-center gap-1 text-sm\">\n                  <Clock className=\"w-3 h-3\" />\n                  Available 24/7\n                </p>\n              </div>\n            )}\n          </motion.div>\n\n          {/* Booking Form */}\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"startTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <Clock className=\"w-4 h-4\" />\n                        Start Time\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"datetime-local\"\n                          min={today}\n                          {...field}\n                          data-testid=\"input-start-time\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"endTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <Clock className=\"w-4 h-4\" />\n                        End Time\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"datetime-local\"\n                          min={today}\n                          {...field}\n                          data-testid=\"input-end-time\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"attendees\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center gap-2\">\n                      <Users className=\"w-4 h-4\" />\n                      Number of Attendees\n                    </FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min={1}\n                        max={resource.capacity}\n                        placeholder={`Max ${resource.capacity} people`}\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                        data-testid=\"input-booking-attendees\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"purpose\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Purpose of Booking</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Brief description of how you'll use this resource...\"\n                        className=\"resize-none\"\n                        rows={3}\n                        {...field}\n                        data-testid=\"textarea-booking-purpose\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={onClose}\n                  data-testid=\"button-cancel-booking\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={bookingMutation.isPending}\n                  data-testid=\"button-confirm-booking\"\n                >\n                  {bookingMutation.isPending ? \"Creating...\" : \"Confirm Booking\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10412},"client/src/components/booking-slot.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport type { BookingWithResource } from \"@/lib/types\";\nimport { Clock, User, MapPin } from \"lucide-react\";\n\ninterface BookingSlotProps {\n  booking: BookingWithResource;\n  onClick?: (booking: BookingWithResource) => void;\n}\n\nconst statusConfig = {\n  confirmed: {\n    label: \"Confirmed\",\n    className: \"bg-success text-success-foreground\",\n  },\n  pending: {\n    label: \"Pending\",\n    className: \"bg-warning text-warning-foreground\",\n  },\n  ongoing: {\n    label: \"In Progress\",\n    className: \"bg-destructive text-destructive-foreground\",\n  },\n  completed: {\n    label: \"Completed\",\n    className: \"bg-muted text-muted-foreground\",\n  },\n  cancelled: {\n    label: \"Cancelled\",\n    className: \"bg-secondary text-secondary-foreground\",\n  },\n};\n\nexport function BookingSlot({ booking, onClick }: BookingSlotProps) {\n  const config = statusConfig[booking.status as keyof typeof statusConfig];\n  \n  const formatTime = (date: Date) => {\n    return new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    }).format(new Date(date));\n  };\n\n  const formatTimeRange = () => {\n    const start = formatTime(booking.startTime);\n    const end = formatTime(booking.endTime);\n    return `${start} - ${end}`;\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.95 }}\n      animate={{ opacity: 1, scale: 1 }}\n      whileHover={{ scale: 1.02 }}\n      className=\"booking-slot bg-muted/50 rounded-lg p-4 hover:bg-muted transition-colors cursor-pointer\"\n      onClick={() => onClick?.(booking)}\n      data-testid={`booking-slot-${booking.id}`}\n    >\n      <div className=\"flex items-center justify-between mb-2\">\n        <span className=\"font-medium text-card-foreground\" data-testid={`text-booking-resource-${booking.id}`}>\n          {booking.resource?.name || \"Unknown Resource\"}\n        </span>\n        <span \n          className={cn(\"text-xs px-2 py-1 rounded-full\", config.className)}\n          data-testid={`status-booking-${booking.status}-${booking.id}`}\n        >\n          {config.label}\n        </span>\n      </div>\n      \n      <div className=\"text-sm text-muted-foreground space-y-1\">\n        <div className=\"flex items-center space-x-2\">\n          <Clock className=\"w-3 h-3\" />\n          <span data-testid={`text-booking-time-${booking.id}`}>\n            {formatTimeRange()}\n          </span>\n        </div>\n        \n        {booking.purpose && (\n          <div className=\"flex items-start space-x-2\">\n            <User className=\"w-3 h-3 mt-0.5\" />\n            <span className=\"truncate\" data-testid={`text-booking-purpose-${booking.id}`}>\n              {booking.purpose}\n            </span>\n          </div>\n        )}\n        \n        {booking.resource?.location && (\n          <div className=\"flex items-center space-x-2\">\n            <MapPin className=\"w-3 h-3\" />\n            <span className=\"text-xs\" data-testid={`text-booking-location-${booking.id}`}>\n              {booking.resource.location}\n            </span>\n          </div>\n        )}\n      </div>\n      \n      {booking.attendees && (\n        <div className=\"mt-2 pt-2 border-t border-border\">\n          <span className=\"text-xs text-muted-foreground\" data-testid={`text-booking-attendees-${booking.id}`}>\n            {booking.attendees} attendees\n          </span>\n        </div>\n      )}\n    </motion.div>\n  );\n}\n","size_bytes":3414},"client/src/components/quick-book-form.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport type { QuickBookFormData } from \"@/lib/types\";\n\nconst quickBookSchema = z.object({\n  resourceType: z.string().min(1, \"Resource type is required\"),\n  date: z.string().min(1, \"Date is required\"),\n  duration: z.number().min(1, \"Duration must be at least 1 hour\").max(8, \"Duration cannot exceed 8 hours\"),\n  purpose: z.string().min(1, \"Purpose is required\").max(200, \"Purpose must be less than 200 characters\"),\n  attendees: z.number().min(1, \"At least 1 attendee is required\").max(500, \"Too many attendees\"),\n});\n\ninterface QuickBookFormProps {\n  onSubmit: (data: QuickBookFormData) => void;\n  isLoading?: boolean;\n}\n\nconst resourceTypes = [\n  { value: \"computer_lab\", label: \"Computer Lab\" },\n  { value: \"chemistry_lab\", label: \"Chemistry Lab\" },\n  { value: \"physics_lab\", label: \"Physics Lab\" },\n  { value: \"biology_lab\", label: \"Biology Lab\" },\n  { value: \"auditorium\", label: \"Auditorium\" },\n  { value: \"seminar_hall\", label: \"Seminar Hall\" },\n  { value: \"sports_court\", label: \"Sports Court\" },\n];\n\nconst durations = [\n  { value: 1, label: \"1 hour\" },\n  { value: 2, label: \"2 hours\" },\n  { value: 3, label: \"3 hours\" },\n  { value: 4, label: \"4 hours\" },\n  { value: 6, label: \"6 hours\" },\n  { value: 8, label: \"8 hours\" },\n];\n\nexport function QuickBookForm({ onSubmit, isLoading = false }: QuickBookFormProps) {\n  const form = useForm<QuickBookFormData>({\n    resolver: zodResolver(quickBookSchema),\n    defaultValues: {\n      resourceType: \"\",\n      date: \"\",\n      duration: 2,\n      purpose: \"\",\n      attendees: 1,\n    },\n  });\n\n  const handleSubmit = (data: QuickBookFormData) => {\n    onSubmit(data);\n  };\n\n  // Get today's date in YYYY-MM-DD format for min date\n  const today = new Date().toISOString().split('T')[0];\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"bg-card border border-border rounded-xl p-6\"\n    >\n      <h3 className=\"text-lg font-semibold mb-4\">Quick Book</h3>\n      \n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"resourceType\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Resource Type</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-resource-type\">\n                      <SelectValue placeholder=\"Select resource type\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {resourceTypes.map((type) => (\n                      <SelectItem \n                        key={type.value} \n                        value={type.value}\n                        data-testid={`option-${type.value}`}\n                      >\n                        {type.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"date\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Date</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"date\"\n                      min={today}\n                      {...field}\n                      data-testid=\"input-date\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"duration\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Duration</FormLabel>\n                  <Select onValueChange={(value) => field.onChange(parseInt(value))} defaultValue={field.value.toString()}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-duration\">\n                        <SelectValue />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {durations.map((duration) => (\n                        <SelectItem \n                          key={duration.value} \n                          value={duration.value.toString()}\n                          data-testid={`option-duration-${duration.value}`}\n                        >\n                          {duration.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"attendees\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Number of Attendees</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"number\"\n                    min={1}\n                    max={500}\n                    {...field}\n                    onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                    data-testid=\"input-attendees\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"purpose\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Purpose</FormLabel>\n                <FormControl>\n                  <Textarea\n                    placeholder=\"Brief description of the booking purpose...\"\n                    className=\"resize-none\"\n                    {...field}\n                    data-testid=\"textarea-purpose\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={isLoading}\n            data-testid=\"button-find-slots\"\n          >\n            {isLoading ? \"Searching...\" : \"Find Available Slots\"}\n          </Button>\n        </form>\n      </Form>\n    </motion.div>\n  );\n}\n","size_bytes":7027},"client/src/components/resource-card.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport type { ResourceWithStatus } from \"@/lib/types\";\nimport { \n  Computer, \n  FlaskConical, \n  Atom, \n  Dna, \n  Calculator, \n  Building, \n  Users, \n  MapPin,\n  Clock,\n  Theater,\n} from \"lucide-react\";\n\ninterface ResourceCardProps {\n  resource: ResourceWithStatus;\n  onBook: (resource: ResourceWithStatus) => void;\n  onViewSchedule: (resource: ResourceWithStatus) => void;\n}\n\nconst resourceTypeIcons = {\n  computer_lab: Computer,\n  chemistry_lab: FlaskConical,\n  physics_lab: Atom,\n  biology_lab: Dna,\n  auditorium: Theater,\n  seminar_hall: Building,\n  sports_court: Users,\n};\n\nconst statusConfig = {\n  available: {\n    label: \"Available\",\n    className: \"status-available\",\n    nextAvailable: \"Now\",\n    nextAvailableClass: \"text-success\",\n    actionLabel: \"Book Now\",\n    actionVariant: \"default\" as const,\n  },\n  booked: {\n    label: \"Booked\",\n    className: \"status-booked\", \n    nextAvailable: \"3:00 PM\",\n    nextAvailableClass: \"text-warning\",\n    actionLabel: \"View Schedule\",\n    actionVariant: \"secondary\" as const,\n  },\n  ongoing: {\n    label: \"Ongoing\",\n    className: \"status-ongoing\",\n    nextAvailable: \"5:00 PM\", \n    nextAvailableClass: \"text-destructive\",\n    actionLabel: \"Join Queue\",\n    actionVariant: \"secondary\" as const,\n  },\n  maintenance: {\n    label: \"Maintenance\",\n    className: \"status-acquired\",\n    nextAvailable: \"Tomorrow\",\n    nextAvailableClass: \"text-muted-foreground\",\n    actionLabel: \"Notify Me\",\n    actionVariant: \"secondary\" as const,\n  },\n};\n\nexport function ResourceCard({ resource, onBook, onViewSchedule }: ResourceCardProps) {\n  const IconComponent = resourceTypeIcons[resource.type as keyof typeof resourceTypeIcons] || Building;\n  const config = statusConfig[resource.status];\n\n  const handleAction = () => {\n    if (resource.status === \"available\") {\n      onBook(resource);\n    } else {\n      onViewSchedule(resource);\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      whileHover={{ y: -2 }}\n      className=\"resource-card bg-card border border-border rounded-xl p-6 cursor-pointer transition-all\"\n      data-testid={`card-resource-${resource.id}`}\n    >\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-blue-500/10 rounded-lg flex items-center justify-center\">\n            <IconComponent className=\"text-blue-500 w-6 h-6\" />\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-card-foreground\" data-testid={`text-resource-name-${resource.id}`}>\n              {resource.name}\n            </h4>\n            <p className=\"text-sm text-muted-foreground\" data-testid={`text-resource-department-${resource.id}`}>\n              {resource.department?.name || \"Unknown Department\"}\n            </p>\n          </div>\n        </div>\n        <span \n          className={cn(\"px-3 py-1 rounded-full text-xs font-medium\", config.className)}\n          data-testid={`status-${resource.status}-${resource.id}`}\n        >\n          {config.label}\n        </span>\n      </div>\n\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n        <div>\n          <p className=\"text-muted-foreground flex items-center gap-1\">\n            <Users className=\"w-3 h-3\" />\n            Capacity\n          </p>\n          <p className=\"font-medium\" data-testid={`text-capacity-${resource.id}`}>\n            {resource.capacity} {resource.type.includes('lab') ? 'stations' : 'seats'}\n          </p>\n        </div>\n        <div>\n          <p className=\"text-muted-foreground\">Equipment</p>\n          <p className=\"font-medium truncate\" data-testid={`text-equipment-${resource.id}`}>\n            {resource.equipment?.slice(0, 2).join(\", \") || \"Standard equipment\"}\n          </p>\n        </div>\n        <div>\n          <p className=\"text-muted-foreground flex items-center gap-1\">\n            <Clock className=\"w-3 h-3\" />\n            Next Available\n          </p>\n          <p className={cn(\"font-medium\", config.nextAvailableClass)} data-testid={`text-next-available-${resource.id}`}>\n            {config.nextAvailable}\n          </p>\n        </div>\n        <div className=\"flex items-end\">\n          <Button\n            onClick={handleAction}\n            variant={config.actionVariant}\n            size=\"sm\"\n            className=\"w-full text-sm\"\n            data-testid={`button-${resource.status === 'available' ? 'book' : 'schedule'}-${resource.id}`}\n          >\n            {config.actionLabel}\n          </Button>\n        </div>\n      </div>\n\n      {resource.location && (\n        <div className=\"mt-4 pt-4 border-t border-border\">\n          <p className=\"text-xs text-muted-foreground flex items-center gap-1\">\n            <MapPin className=\"w-3 h-3\" />\n            {resource.location}\n          </p>\n        </div>\n      )}\n    </motion.div>\n  );\n}\n","size_bytes":5015},"client/src/components/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport type { Department } from \"@shared/schema\";\nimport type { NavItem } from \"@/lib/types\";\nimport { \n  University, \n  LayoutDashboard, \n  Calendar, \n  Search, \n  X, \n  Menu,\n  Computer,\n  FlaskConical,\n  Atom,\n  Dna,\n  Calculator,\n  Building,\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onToggle: () => void;\n  onClose: () => void;\n}\n\nconst departmentIcons = {\n  \"fas fa-desktop\": Computer,\n  \"fas fa-flask\": FlaskConical,\n  \"fas fa-atom\": Atom,\n  \"fas fa-dna\": Dna,\n  \"fas fa-calculator\": Calculator,\n  \"fas fa-building\": Building,\n};\n\nconst mainNavItems: NavItem[] = [\n  {\n    id: \"dashboard\",\n    label: \"Dashboard\",\n    icon: \"LayoutDashboard\",\n    path: \"/\",\n    isActive: true,\n  },\n  {\n    id: \"bookings\",\n    label: \"My Bookings\", \n    icon: \"Calendar\",\n    path: \"/my-bookings\",\n  },\n  {\n    id: \"browse\",\n    label: \"Browse Resources\",\n    icon: \"Search\",\n    path: \"/browse-resources\",\n  },\n];\n\nexport function Sidebar({ isOpen, onToggle, onClose }: SidebarProps) {\n  const [location] = useLocation();\n  const [activeItem, setActiveItem] = useState(\"dashboard\");\n\n  const { data: departments = [] } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n  });\n\n  const { data: currentUser } = useQuery<any>({\n    queryKey: [\"/api/auth/me\"],\n  });\n\n  const sidebarVariants = {\n    open: { x: 0 },\n    closed: { x: \"-100%\" },\n  };\n\n  return (\n    <>\n      {/* Mobile overlay */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 z-40 bg-black/20 mobile-menu-overlay lg:hidden\"\n            onClick={onClose}\n            data-testid=\"sidebar-overlay\"\n          />\n        )}\n      </AnimatePresence>\n\n      {/* Sidebar */}\n      <motion.aside\n        variants={sidebarVariants}\n        animate={isOpen ? \"open\" : \"closed\"}\n        transition={{ type: \"spring\", damping: 30, stiffness: 300 }}\n        className=\"fixed left-0 top-0 z-50 h-screen w-72 bg-sidebar border-r border-sidebar-border sidebar-transition lg:translate-x-0\"\n        data-testid=\"sidebar\"\n      >\n        <div className=\"flex h-full flex-col\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-sidebar-border\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-sidebar-primary rounded-lg flex items-center justify-center\">\n                <University className=\"text-sidebar-primary-foreground w-5 h-5\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-sidebar-foreground\">UniResource</h1>\n                <p className=\"text-sm text-muted-foreground\">Resource Manager</p>\n              </div>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"lg:hidden p-2 hover:bg-sidebar-accent rounded-md transition-colors\"\n              data-testid=\"button-close-sidebar\"\n            >\n              <X className=\"text-sidebar-foreground w-4 h-4\" />\n            </button>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 p-4 space-y-2\">\n            <div className=\"space-y-1\">\n              {mainNavItems.map((item) => {\n                const isActive = location === item.path;\n                const Icon = item.icon === \"LayoutDashboard\" ? LayoutDashboard : \n                           item.icon === \"Calendar\" ? Calendar : Search;\n                \n                return (\n                  <Link\n                    key={item.id}\n                    href={item.path || \"#\"}\n                    onClick={() => {\n                      setActiveItem(item.id);\n                      if (window.innerWidth < 1024) onClose();\n                    }}\n                  >\n                    <motion.button\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      className={cn(\n                        \"w-full flex items-center space-x-3 px-4 py-3 text-left rounded-lg transition-colors\",\n                        isActive\n                          ? \"bg-sidebar-primary text-sidebar-primary-foreground\"\n                          : \"text-muted-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\"\n                      )}\n                      data-testid={`nav-${item.id}`}\n                    >\n                      <Icon className=\"w-5 h-5\" />\n                      <span>{item.label}</span>\n                    </motion.button>\n                  </Link>\n                );\n              })}\n            </div>\n\n            {/* Departments */}\n            <div className=\"pt-6\">\n              <p className=\"px-4 text-xs font-medium text-muted-foreground uppercase tracking-wider mb-2\">\n                Departments\n              </p>\n              <div className=\"space-y-1\">\n                {departments.map((dept) => {\n                  const IconComponent = departmentIcons[dept.icon as keyof typeof departmentIcons] || Building;\n                  \n                  return (\n                    <Link\n                      key={dept.id}\n                      href={`/browse-resources?dept=${dept.id}`}\n                      onClick={() => {\n                        setActiveItem(\"browse\");\n                        if (window.innerWidth < 1024) onClose();\n                      }}\n                    >\n                      <motion.button\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        className=\"w-full flex items-center space-x-3 px-4 py-2 text-left text-sm text-muted-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground rounded-lg transition-colors\"\n                        data-testid={`dept-${dept.code.toLowerCase()}`}\n                      >\n                        <IconComponent className={cn(\"w-4 h-4\", {\n                          \"text-blue-500\": dept.color === \"blue\",\n                          \"text-green-500\": dept.color === \"green\",\n                          \"text-purple-500\": dept.color === \"purple\",\n                          \"text-red-500\": dept.color === \"red\",\n                          \"text-orange-500\": dept.color === \"orange\",\n                          \"text-gray-500\": dept.color === \"gray\",\n                        })} />\n                        <span>{dept.name}</span>\n                      </motion.button>\n                    </Link>\n                  );\n                })}\n              </div>\n            </div>\n          </nav>\n\n          {/* User Profile */}\n          <div className=\"p-4 border-t border-sidebar-border\">\n            <motion.div\n              whileHover={{ scale: 1.02 }}\n              className=\"flex items-center space-x-3 p-3 hover:bg-sidebar-accent rounded-lg transition-colors cursor-pointer\"\n              data-testid=\"user-profile\"\n            >\n              <img\n                src={currentUser?.profileImage || \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\"}\n                alt=\"User profile\"\n                className=\"w-10 h-10 rounded-full object-cover\"\n                data-testid=\"img-user-avatar\"\n              />\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium truncate text-sidebar-foreground\" data-testid=\"text-user-name\">\n                  {currentUser ? `${currentUser.firstName} ${currentUser.lastName}` : \"Dr. Sarah Chen\"}\n                </p>\n                <p className=\"text-xs text-muted-foreground truncate\" data-testid=\"text-user-role\">\n                  {currentUser ? `${currentUser.department} ${currentUser.role}` : \"Computer Science Faculty\"}\n                </p>\n              </div>\n            </motion.div>\n          </div>\n        </div>\n      </motion.aside>\n    </>\n  );\n}\n","size_bytes":8184},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(\n  undefined\n);\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"theme\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(storageKey) as Theme) || defaultTheme;\n    }\n    return defaultTheme;\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value: ThemeProviderContextType = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n    toggleTheme: () => {\n      const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n      localStorage.setItem(storageKey, newTheme);\n      setTheme(newTheme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n","size_bytes":1582},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"import type { User, Department, Booking, ResourceStatus } from \"@shared/schema\";\n\nexport interface ResourceWithStatus extends Omit<import(\"@shared/schema\").Resource, 'workingHoursStart' | 'workingHoursEnd' | 'hasWorkingHours'> {\n  department?: Department;\n  status: ResourceStatus;\n  workingHoursStart?: string;\n  workingHoursEnd?: string;\n  hasWorkingHours?: boolean;\n}\n\nexport interface BookingWithResource extends Booking {\n  resource?: import(\"@shared/schema\").Resource;\n}\n\nexport interface DashboardStats {\n  available: number;\n  booked: number;\n  ongoing: number;\n  myBookings: number;\n}\n\nexport interface QuickBookFormData {\n  resourceType: string;\n  date: string;\n  duration: number;\n  purpose: string;\n  attendees: number;\n}\n\nexport type NavItem = {\n  id: string;\n  label: string;\n  icon: string;\n  path?: string;\n  isActive?: boolean;\n};\n","size_bytes":848},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/browse-resources.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ResourceCard } from \"@/components/resource-card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ResourceWithStatus } from \"@/lib/types\";\nimport type { Department } from \"@shared/schema\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  Search, \n  Filter, \n  Grid3X3, \n  List, \n  SlidersHorizontal,\n  MapPin,\n  Users,\n  Zap,\n} from \"lucide-react\";\n\nexport default function BrowseResources() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedDepartment, setSelectedDepartment] = useState<string>(\"all\");\n  const [resourceType, setResourceType] = useState<string>(\"all\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [sortBy, setSortBy] = useState<string>(\"name\");\n  const { toast } = useToast();\n\n  const { data: resources = [], isLoading } = useQuery<ResourceWithStatus[]>({\n    queryKey: [\"/api/resources\"],\n  });\n\n  const { data: departments = [] } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n  });\n\n  // Get unique resource types\n  const resourceTypes = Array.from(new Set(resources.map(r => r.type)));\n\n  // Filter and sort resources\n  const filteredResources = resources\n    .filter((resource) => {\n      const matchesSearch = resource.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           resource.department?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           resource.location.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesDepartment = selectedDepartment === \"all\" || resource.departmentId === selectedDepartment;\n      const matchesType = resourceType === \"all\" || resource.type === resourceType;\n      const matchesStatus = statusFilter === \"all\" || resource.status === statusFilter;\n      \n      return matchesSearch && matchesDepartment && matchesType && matchesStatus;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case \"name\":\n          return a.name.localeCompare(b.name);\n        case \"capacity\":\n          return b.capacity - a.capacity;\n        case \"department\":\n          return (a.department?.name || \"\").localeCompare(b.department?.name || \"\");\n        case \"status\":\n          return a.status.localeCompare(b.status);\n        default:\n          return 0;\n      }\n    });\n\n  const handleBookResource = (resource: ResourceWithStatus) => {\n    toast({\n      title: \"Opening Booking Form\",\n      description: `Booking form for ${resource.name}`,\n    });\n    // TODO: Open booking modal\n  };\n\n  const handleViewSchedule = (resource: ResourceWithStatus) => {\n    toast({\n      title: \"View Schedule\",\n      description: `Opening schedule for ${resource.name}`,\n    });\n    // TODO: Open schedule modal\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Browse Resources</h2>\n          <p className=\"text-muted-foreground\">\n            Discover and book from {resources.length} available resources\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setViewMode(\"grid\")}\n            data-testid=\"button-view-grid\"\n          >\n            <Grid3X3 className=\"w-4 h-4\" />\n          </Button>\n          <Button\n            variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setViewMode(\"list\")}\n            data-testid=\"button-view-list\"\n          >\n            <List className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"grid grid-cols-1 md:grid-cols-4 gap-4\"\n      >\n        <div className=\"bg-card border border-border rounded-lg p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <Zap className=\"w-5 h-5 text-primary\" />\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Resources</p>\n              <p className=\"text-xl font-bold\">{resources.length}</p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-card border border-border rounded-lg p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-success/10 rounded-lg flex items-center justify-center\">\n              <Zap className=\"w-5 h-5 text-success\" />\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Available Now</p>\n              <p className=\"text-xl font-bold text-success\">\n                {resources.filter(r => r.status === \"available\").length}\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-card border border-border rounded-lg p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-warning/10 rounded-lg flex items-center justify-center\">\n              <Users className=\"w-5 h-5 text-warning\" />\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Capacity</p>\n              <p className=\"text-xl font-bold\">\n                {resources.reduce((sum, r) => sum + r.capacity, 0)}\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-card border border-border rounded-lg p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-purple-500/10 rounded-lg flex items-center justify-center\">\n              <MapPin className=\"w-5 h-5 text-purple-500\" />\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Departments</p>\n              <p className=\"text-xl font-bold\">{departments.length}</p>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Filters */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.1 }}\n        className=\"bg-card border border-border rounded-xl p-6\"\n      >\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n            <SlidersHorizontal className=\"w-5 h-5\" />\n            Filter & Search\n          </h3>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => {\n              setSearchTerm(\"\");\n              setSelectedDepartment(\"all\");\n              setResourceType(\"all\");\n              setStatusFilter(\"all\");\n            }}\n            data-testid=\"button-clear-filters\"\n          >\n            Clear All\n          </Button>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4\">\n          <div className=\"relative lg:col-span-2\">\n            <Input\n              placeholder=\"Search resources, departments, or locations...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-browse\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n          </div>\n          \n          <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>\n            <SelectTrigger data-testid=\"select-department-browse\">\n              <SelectValue placeholder=\"Department\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Departments</SelectItem>\n              {departments.map((dept) => (\n                <SelectItem key={dept.id} value={dept.id}>\n                  {dept.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          \n          <Select value={resourceType} onValueChange={setResourceType}>\n            <SelectTrigger data-testid=\"select-resource-type-browse\">\n              <SelectValue placeholder=\"Resource Type\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Types</SelectItem>\n              {resourceTypes.map((type) => (\n                <SelectItem key={type} value={type}>\n                  {type.replace(\"_\", \" \").replace(/\\b\\w/g, l => l.toUpperCase())}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          \n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger data-testid=\"select-status-browse\">\n              <SelectValue placeholder=\"Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"available\">Available</SelectItem>\n              <SelectItem value=\"booked\">Booked</SelectItem>\n              <SelectItem value=\"ongoing\">Ongoing</SelectItem>\n              <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Select value={sortBy} onValueChange={setSortBy}>\n            <SelectTrigger data-testid=\"select-sort-browse\">\n              <SelectValue placeholder=\"Sort By\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"name\">Name</SelectItem>\n              <SelectItem value=\"capacity\">Capacity</SelectItem>\n              <SelectItem value=\"department\">Department</SelectItem>\n              <SelectItem value=\"status\">Status</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </motion.div>\n\n      {/* Results */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.2 }}\n      >\n        {filteredResources.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Search className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">No resources found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Try adjusting your search criteria or filters.\n            </p>\n            <Button\n              onClick={() => {\n                setSearchTerm(\"\");\n                setSelectedDepartment(\"all\");\n                setResourceType(\"all\");\n                setStatusFilter(\"all\");\n              }}\n              data-testid=\"button-reset-search\"\n            >\n              Reset Search\n            </Button>\n          </div>\n        ) : (\n          <>\n            <div className=\"flex items-center justify-between mb-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Showing {filteredResources.length} of {resources.length} resources\n              </p>\n            </div>\n            \n            <div className={cn(\n              \"grid gap-4\",\n              viewMode === \"grid\" ? \"md:grid-cols-2 lg:grid-cols-1\" : \"grid-cols-1\"\n            )}>\n              {filteredResources.map((resource, index) => (\n                <motion.div\n                  key={resource.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.05 }}\n                >\n                  <ResourceCard\n                    resource={resource}\n                    onBook={handleBookResource}\n                    onViewSchedule={handleViewSchedule}\n                  />\n                </motion.div>\n              ))}\n            </div>\n          </>\n        )}\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":12523},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ResourceCard } from \"@/components/resource-card\";\nimport { BookingSlot } from \"@/components/booking-slot\";\nimport { QuickBookForm } from \"@/components/quick-book-form\";\nimport { BookingModal } from \"@/components/booking-modal\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ResourceWithStatus, BookingWithResource, DashboardStats, QuickBookFormData } from \"@/lib/types\";\nimport type { Department } from \"@shared/schema\";\nimport { \n  CheckCircle, \n  CalendarCheck, \n  PlayCircle, \n  Watch, \n  Plus,\n  Calendar,\n  History,\n  Settings,\n  Search,\n  Filter,\n} from \"lucide-react\";\n\nconst quickActionItems = [\n  { icon: Plus, label: \"Book Resource\", variant: \"primary\" as const },\n  { icon: Calendar, label: \"View Calendar\", variant: \"success\" as const },\n  { icon: History, label: \"Booking History\", variant: \"warning\" as const },\n  { icon: Settings, label: \"Settings\", variant: \"purple\" as const },\n];\n\nexport default function Dashboard() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedDepartment, setSelectedDepartment] = useState<string>(\"all\");\n  const [selectedResource, setSelectedResource] = useState<ResourceWithStatus | null>(null);\n  const [isBookingModalOpen, setIsBookingModalOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: stats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: resources = [] } = useQuery<ResourceWithStatus[]>({\n    queryKey: [\"/api/resources\"],\n  });\n\n  const { data: departments = [] } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n  });\n\n  const { data: todayBookings = [] } = useQuery<BookingWithResource[]>({\n    queryKey: [\"/api/bookings\", { date: new Date().toISOString().split('T')[0] }],\n  });\n\n  // Filter resources based on search and department\n  const filteredResources = resources.filter((resource) => {\n    const matchesSearch = resource.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         resource.department?.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesDepartment = selectedDepartment === \"all\" || resource.departmentId === selectedDepartment;\n    return matchesSearch && matchesDepartment;\n  });\n\n  const handleBookResource = (resource: ResourceWithStatus) => {\n    setSelectedResource(resource);\n    setIsBookingModalOpen(true);\n  };\n\n  const handleViewSchedule = (resource: ResourceWithStatus) => {\n    toast({\n      title: \"View Schedule\",\n      description: `Showing schedule for ${resource.name}`,\n    });\n    // TODO: Open schedule view\n  };\n\n  const handleQuickBook = (data: QuickBookFormData) => {\n    // Find available resources matching the criteria\n    const availableResources = resources.filter(resource => \n      resource.type === data.resourceType && \n      resource.status === 'available' &&\n      resource.capacity >= data.attendees\n    );\n    \n    if (availableResources.length > 0) {\n      // For demo, select the first available resource\n      const bestMatch = availableResources[0];\n      setSelectedResource(bestMatch);\n      setIsBookingModalOpen(true);\n      toast({\n        title: \"Resource Found\",\n        description: `Opening booking form for ${bestMatch.name}`,\n      });\n    } else {\n      toast({\n        title: \"No Available Resources\",\n        description: `No ${data.resourceType.replace('_', ' ')} available for ${data.attendees} attendees on ${data.date}`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBookingClick = (booking: BookingWithResource) => {\n    toast({\n      title: \"Booking Details\",\n      description: `Opening details for ${booking.resource?.name}`,\n    });\n    // TODO: Open booking details\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Stats Cards */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\"\n      >\n        <div className=\"bg-card border border-border rounded-xl p-6 hover:shadow-lg transition-shadow\" data-testid=\"card-available-resources\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-success/10 rounded-lg flex items-center justify-center\">\n              <CheckCircle className=\"text-success w-6 h-6\" />\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Available Now</p>\n              <p className=\"text-2xl font-bold text-success\" data-testid=\"text-available-count\">\n                {stats?.available || 0}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-card border border-border rounded-xl p-6 hover:shadow-lg transition-shadow\" data-testid=\"card-booked-resources\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-warning/10 rounded-lg flex items-center justify-center\">\n              <CalendarCheck className=\"text-warning w-6 h-6\" />\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Booked Today</p>\n              <p className=\"text-2xl font-bold text-warning\" data-testid=\"text-booked-count\">\n                {stats?.booked || 0}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-card border border-border rounded-xl p-6 hover:shadow-lg transition-shadow\" data-testid=\"card-ongoing-sessions\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n              <PlayCircle className=\"text-destructive w-6 h-6\" />\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Ongoing</p>\n              <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-ongoing-count\">\n                {stats?.ongoing || 0}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-card border border-border rounded-xl p-6 hover:shadow-lg transition-shadow\" data-testid=\"card-my-bookings\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <Watch className=\"text-primary w-6 h-6\" />\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">My Bookings</p>\n              <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-my-bookings-count\">\n                {stats?.myBookings || 0}\n              </p>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n\n      {/* Quick Actions */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.1 }}\n        className=\"bg-card border border-border rounded-xl p-6\"\n      >\n        <h3 className=\"text-lg font-semibold mb-4\">Quick Actions</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {quickActionItems.map((item, index) => {\n            const Icon = item.icon;\n            return (\n              <motion.button\n                key={item.label}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                className=\"flex flex-col items-center p-4 hover:bg-accent rounded-lg transition-colors group\"\n                data-testid={`button-quick-${item.label.toLowerCase().replace(' ', '-')}`}\n              >\n                <div className={`w-12 h-12 bg-${item.variant}/10 rounded-lg flex items-center justify-center mb-3 group-hover:bg-${item.variant}/20 transition-colors`}>\n                  <Icon className={`text-${item.variant} w-6 h-6`} />\n                </div>\n                <span className=\"text-sm font-medium\">{item.label}</span>\n              </motion.button>\n            );\n          })}\n        </div>\n      </motion.div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* Available Resources */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Available Resources</h3>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative\">\n                <Input\n                  placeholder=\"Search resources...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-64 pl-10\"\n                  data-testid=\"input-search-resources\"\n                />\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              </div>\n              <Select value={selectedDepartment} onValueChange={setSelectedDepartment}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-department-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Departments</SelectItem>\n                  {departments.map((dept) => (\n                    <SelectItem key={dept.id} value={dept.id}>\n                      {dept.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter\">\n                <Filter className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.2 }}\n            className=\"grid gap-4\"\n          >\n            {filteredResources.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"text-no-resources\">\n                No resources found matching your criteria.\n              </div>\n            ) : (\n              filteredResources.map((resource, index) => (\n                <motion.div\n                  key={resource.id}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <ResourceCard\n                    resource={resource}\n                    onBook={handleBookResource}\n                    onViewSchedule={handleViewSchedule}\n                  />\n                </motion.div>\n              ))\n            )}\n          </motion.div>\n        </div>\n\n        {/* Sidebar Content */}\n        <div className=\"space-y-6\">\n          {/* Today's Schedule */}\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"bg-card border border-border rounded-xl p-6\"\n          >\n            <h3 className=\"text-lg font-semibold mb-4\">Today's Schedule</h3>\n            <div className=\"space-y-4\">\n              {todayBookings.length === 0 ? (\n                <p className=\"text-center py-4 text-muted-foreground text-sm\" data-testid=\"text-no-bookings\">\n                  No bookings for today.\n                </p>\n              ) : (\n                todayBookings.slice(0, 3).map((booking, index) => (\n                  <motion.div\n                    key={booking.id}\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.4 + index * 0.1 }}\n                  >\n                    <BookingSlot\n                      booking={booking}\n                      onClick={handleBookingClick}\n                    />\n                  </motion.div>\n                ))\n              )}\n            </div>\n            <Button \n              variant=\"ghost\" \n              className=\"w-full mt-4\" \n              size=\"sm\"\n              data-testid=\"button-view-full-calendar\"\n            >\n              View Full Calendar\n            </Button>\n          </motion.div>\n\n          {/* Quick Book Form */}\n          <motion.div\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.4 }}\n          >\n            <QuickBookForm onSubmit={handleQuickBook} />\n          </motion.div>\n        </div>\n      </div>\n\n      {/* Booking Modal */}\n      <BookingModal\n        isOpen={isBookingModalOpen}\n        onClose={() => {\n          setIsBookingModalOpen(false);\n          setSelectedResource(null);\n        }}\n        resource={selectedResource}\n      />\n    </div>\n  );\n}\n","size_bytes":13002},"client/src/pages/my-bookings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BookingSlot } from \"@/components/booking-slot\";\nimport type { BookingWithResource } from \"@/lib/types\";\nimport { Search, Filter, Calendar, Clock } from \"lucide-react\";\n\nexport default function MyBookings() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [sortBy, setSortBy] = useState<string>(\"date\");\n\n  const { data: bookings = [], isLoading } = useQuery<BookingWithResource[]>({\n    queryKey: [\"/api/bookings\", { user: \"current-user-id\" }], // TODO: Get actual user ID\n  });\n\n  // Filter and sort bookings\n  const filteredBookings = bookings\n    .filter((booking) => {\n      const matchesSearch = booking.resource?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           booking.purpose?.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesStatus = statusFilter === \"all\" || booking.status === statusFilter;\n      return matchesSearch && matchesStatus;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case \"date\":\n          return new Date(b.startTime).getTime() - new Date(a.startTime).getTime();\n        case \"resource\":\n          return (a.resource?.name || \"\").localeCompare(b.resource?.name || \"\");\n        case \"status\":\n          return a.status.localeCompare(b.status);\n        default:\n          return 0;\n      }\n    });\n\n  const handleBookingClick = (booking: BookingWithResource) => {\n    // TODO: Open booking details modal\n    console.log(\"Booking clicked:\", booking);\n  };\n\n  const getStatusCounts = () => {\n    return {\n      confirmed: bookings.filter(b => b.status === \"confirmed\").length,\n      pending: bookings.filter(b => b.status === \"pending\").length,\n      ongoing: bookings.filter(b => b.status === \"ongoing\").length,\n      completed: bookings.filter(b => b.status === \"completed\").length,\n      cancelled: bookings.filter(b => b.status === \"cancelled\").length,\n    };\n  };\n\n  const statusCounts = getStatusCounts();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">My Bookings</h2>\n          <p className=\"text-muted-foreground\">Manage and view your resource bookings</p>\n        </div>\n        <Button data-testid=\"button-new-booking\">\n          <Calendar className=\"w-4 h-4 mr-2\" />\n          New Booking\n        </Button>\n      </div>\n\n      {/* Status Overview */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"grid grid-cols-2 md:grid-cols-5 gap-4\"\n      >\n        <div className=\"bg-card border border-border rounded-lg p-4 text-center\">\n          <p className=\"text-2xl font-bold text-success\">{statusCounts.confirmed}</p>\n          <p className=\"text-sm text-muted-foreground\">Confirmed</p>\n        </div>\n        <div className=\"bg-card border border-border rounded-lg p-4 text-center\">\n          <p className=\"text-2xl font-bold text-warning\">{statusCounts.pending}</p>\n          <p className=\"text-sm text-muted-foreground\">Pending</p>\n        </div>\n        <div className=\"bg-card border border-border rounded-lg p-4 text-center\">\n          <p className=\"text-2xl font-bold text-destructive\">{statusCounts.ongoing}</p>\n          <p className=\"text-sm text-muted-foreground\">Ongoing</p>\n        </div>\n        <div className=\"bg-card border border-border rounded-lg p-4 text-center\">\n          <p className=\"text-2xl font-bold text-muted-foreground\">{statusCounts.completed}</p>\n          <p className=\"text-sm text-muted-foreground\">Completed</p>\n        </div>\n        <div className=\"bg-card border border-border rounded-lg p-4 text-center\">\n          <p className=\"text-2xl font-bold text-secondary-foreground\">{statusCounts.cancelled}</p>\n          <p className=\"text-sm text-muted-foreground\">Cancelled</p>\n        </div>\n      </motion.div>\n\n      {/* Filters */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative\">\n            <Input\n              placeholder=\"Search bookings...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-64 pl-10\"\n              data-testid=\"input-search-bookings\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n          </div>\n          \n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-status-filter\">\n              <SelectValue placeholder=\"Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"ongoing\">Ongoing</SelectItem>\n              <SelectItem value=\"completed\">Completed</SelectItem>\n              <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Select value={sortBy} onValueChange={setSortBy}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-sort\">\n              <Clock className=\"w-4 h-4 mr-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"date\">Sort by Date</SelectItem>\n              <SelectItem value=\"resource\">Sort by Resource</SelectItem>\n              <SelectItem value=\"status\">Sort by Status</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-advanced-filter\">\n            <Filter className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Bookings List */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ delay: 0.2 }}\n        className=\"space-y-4\"\n      >\n        {filteredBookings.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">No bookings found</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {searchTerm || statusFilter !== \"all\" \n                ? \"Try adjusting your filters or search terms.\"\n                : \"You haven't made any bookings yet. Start by booking a resource!\"\n              }\n            </p>\n            <Button data-testid=\"button-create-first-booking\">\n              Create Your First Booking\n            </Button>\n          </div>\n        ) : (\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {filteredBookings.map((booking, index) => (\n              <motion.div\n                key={booking.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <BookingSlot\n                  booking={booking}\n                  onClick={handleBookingClick}\n                />\n              </motion.div>\n            ))}\n          </div>\n        )}\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":8016},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}